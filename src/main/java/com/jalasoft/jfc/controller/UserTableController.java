package com.jalasoft.jfc.controller;

import com.jalasoft.jfc.model.hibernate.User;
import com.jalasoft.jfc.model.hibernate.UserRepository;

import io.swagger.annotations.Api;

import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

/**
 *
 *  IConverter interface defines behavior to Converters.
 *
 * @version 0.1 Jan 2020.
 *
 * @author Oscar Lopez.
 */
@Api(value = "HibernateController", description = "REST API related to User Entity")
@RestController
@RequestMapping("/api")

public class UserTableController {
    String user;
    String password;

    // It indicate which class is to be injected in this case userRepository.
    @Autowired

    // Which is auto-generated by Spring, we will use it to handle the data.
    private UserRepository userRepository;

    // Map ONLY POST Requests.
    @PostMapping(path="/add")
    // @ResponseBody means the returned String is the response, not a view user.
    public @ResponseBody

    // @RequestParam means it is a parameter from the GET or POST request.
    String addNewUser (@RequestParam String user, @RequestParam String password) {
        User n = new User();
        n.setUser(user);
        n.setPassword(password);
        userRepository.save(n);
        return "Saved";
    }

    // Map ONLY GET Requests.
    @GetMapping(path="/all")
    public @ResponseBody Iterable<User> getAllUsers() {
        return userRepository.findAll();

    }
}
